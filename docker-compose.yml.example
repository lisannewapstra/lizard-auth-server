# Inspired by: https://www.theodo.fr/blog/2015/04/docker-and-virtualenv-a-clean-way-to-locally-install-python-dependencies-with-pip-in-docker/
#
# First install your vendors:
#   $ docker-compose run --rm vendors
# Then run your app:
#   $ docker-compose up (-d) server

version: '2'
services:
  vendors:
    build: .
    working_dir: /code
    volumes:
      - .:/code
    command: bash -c "python bootstrap.py && bin/buildout && bin/django syncdb --noinput && bin/django migrate"
  server:
    build: .
    ports:
     - "5000:5000"
    volumes:
      - .:/code
        # The following hack is courtesy to: http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
        # and specifically, this answer: http://stackoverflow.com/a/32785014.
        # The first mount will mount your host project directory in /code,
        # which will mask/overlay the contents that were originally in your
        # Docker container's image. This is a problem because all our Buildout
        # files, eggs, etc. will be masked. However, you can expose the masked
        # files by adding them as extra mounts:
          # - .:/code
          # - /code/bin
          # - /code/eggs
          # - /code/develop-eggs
          # - /code/parts
          # - /code/var  # for test.db
        # This might be needed if you have check-outs:
        # - /code/src

        # Alternatively you could also choose to mount only your source code:
        #     - ./lizard_auth_server:/code/lizard_auth_server
